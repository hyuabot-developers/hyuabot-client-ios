type Query {
  """
  Health check
  """
  health: Boolean!

  """
  Building query
  """
  building(north: Float = null, south: Float = null, east: Float = null, west: Float = null, name: String = null): [BuildingQuery!]!

  """
  Room query
  """
  room(buildingName: String = null, name: String = null, number: String = null): [RoomQuery!]!

  """
  Cafeteria query
  """
  menu(campusId: Int = null, name: String = null, date: Date = null, type_: [String!] = null): [CafeteriaQuery!]!

  """
  Reading room query
  """
  readingRoom(campusId: Int = null, name: String = null, isActive: Boolean = null): [ReadingRoomQuery!]!

  """
  Subway query
  """
  subway(id_: [String!] = null, name: String = null, weekdays: Boolean = null, start: Time = null, end: Time = null): [StationQuery!]!

  """
  Bus stop query
  """
  bus(id_: [Int!] = null, name: String = null, routeId: Int = null, routes: [Int!] = null, weekdays: [String!] = null, logDate: [Date!] = null, start: Time = null, end: Time = null): [StopQuery!]!

  """
  Shuttle query
  """
  shuttle(timestamp: DateTime = "2025-01-14T14:13:50.991975+09:00", period: [String!] = null, weekdays: [Boolean!] = null, routeName: [String!] = null, routeTag: [String!] = null, routeStart: [String!] = null, routeEnd: [String!] = null, stopName: [String!] = null, start: Time = null, end: Time = null, periodCurrent: Boolean = null, periodStart: Date = null, periodEnd: Date = null): ShuttleQuery!

  """
  Notice query
  """
  notice(language: String!, categoryId: Int = null, title: String = null): [NoticeQuery!]!

  """
  Calendar query
  """
  calendar(categoryId: Int = null, title: String = null): CalendarQuery!

  """
  Contact query
  """
  contact(campusId: Int = null, categoryId: Int = null, name: String = null): ContactQuery!
}

type BuildingQuery {
  """
  Building ID
  """
  id: String!

  """
  Building name
  """
  name: String!

  """
  Building latitude
  """
  latitude: Float!

  """
  Building longitude
  """
  longitude: Float!

  """
  Blog URL
  """
  url: String
}

type RoomQuery {
  """
  Room name
  """
  name: String!

  """
  Room number
  """
  number: String!

  """
  Building name
  """
  buildingName: String!

  """
  Building latitude
  """
  latitude: Float!

  """
  Building longitude
  """
  longitude: Float!
}

type CafeteriaQuery {
  """
  Cafeteria ID
  """
  id: Int!

  """
  Cafeteria name
  """
  name: String!

  """
  Cafeteria latitude
  """
  latitude: Float!

  """
  Cafeteria longitude
  """
  longitude: Float!

  """
  Cafeteria running time
  """
  runningTime: CafeteriaRunningTimeQuery!

  """
  Menu list
  """
  menu: [MenuQuery!]!
}

type CafeteriaRunningTimeQuery {
  """
  Breakfast running time
  """
  breakfast: String

  """
  Lunch running time
  """
  lunch: String

  """
  Dinner running time
  """
  dinner: String
}

type MenuQuery {
  """
  Feed date
  """
  date: Date!

  """
  Time type
  """
  type: String!

  """
  Menu
  """
  menu: String!

  """
  Price
  """
  price: String!
}

"""
Date (isoformat)
"""
scalar Date

type ReadingRoomQuery {
  """
  Reading room ID
  """
  id: Int!

  """
  Reading room name
  """
  name: String!

  """
  Is reading room active
  """
  isActive: Boolean!

  """
  Total seats in reading room
  """
  total: Int!

  """
  Active seats in reading room
  """
  active: Int!

  """
  Occupied seats in reading room
  """
  occupied: Int!

  """
  Available seats in reading room
  """
  available: Int!

  """
  Last updated time
  """
  updatedAt: String!
}

type StationQuery {
  """
  Station ID
  """
  id: String!

  """
  Station name
  """
  name: String!

  """
  Station sequence
  """
  sequence: Int!

  """
  Route ID
  """
  routeID: String!

  """
  Timetable
  """
  timetable: TimetableListQuery!

  """
  Realtime
  """
  realtime: RealtimeListQuery!
}

type TimetableListQuery {
  """
  Up
  """
  up: [TimetableQuery!]!

  """
  Down
  """
  down: [TimetableQuery!]!
}

type TimetableQuery {
  """
  Is weekdays
  """
  weekdays: Boolean!

  """
  Departure time
  """
  time: String!

  """
  Start station
  """
  start: TimetableStation!

  """
  Terminal station
  """
  terminal: TimetableStation!
}

type TimetableStation {
  """
  Station ID
  """
  id: String!

  """
  Station name
  """
  name: String!
}

type RealtimeListQuery {
  """
  Up
  """
  up: [RealtimeQuery!]!

  """
  Down
  """
  down: [RealtimeQuery!]!
}

type RealtimeQuery {
  """
  Sequence
  """
  sequence: Int!

  """
  Location
  """
  location: String!

  """
  Stop
  """
  stop: Int!

  """
  Time
  """
  time: Float!

  """
  Train number
  """
  trainNo: String!

  """
  Is express
  """
  express: Boolean!

  """
  Is last
  """
  last: Boolean!

  """
  Status
  """
  status: Int!

  """
  Terminal station
  """
  terminal: TimetableStation!

  """
  Updated at
  """
  updatedAt: DateTime!
}

"""
Date with time (isoformat)
"""
scalar DateTime

"""
Time (isoformat)
"""
scalar Time

type StopQuery {
  """
  Stop ID
  """
  id: Int!

  """
  Stop name
  """
  name: String!

  """
  District code
  """
  districtCode: Int!

  """
  Region name
  """
  region: String!

  """
  Mobile number
  """
  mobileNumber: String!

  """
  Latitude
  """
  latitude: Float!

  """
  Longitude
  """
  longitude: Float!

  """
  Routes
  """
  routes: [BusStopRouteQuery!]!
}

type BusStopRouteQuery {
  """
  Sequence
  """
  sequence: Int!

  """
  Info
  """
  info: BusRouteQuery!

  """
  Minute from start stop
  """
  minuteFromStart: Int!

  """
  Timetable
  """
  timetable: [BusTimetableQuery!]!

  """
  Realtime
  """
  realtime: [BusRealtimeQuery!]!

  """
  Log
  """
  log: [BusDepartureLogQuery!]!
}

type BusRouteQuery {
  """
  Route ID
  """
  id: Int!

  """
  Route name
  """
  name: String!

  """
  Type
  """
  type: BusRouteTypeQuery!

  """
  Company
  """
  company: BusRouteCompanyQuery!

  """
  District code
  """
  districtCode: Int!

  """
  Running time
  """
  runningTime: BusRunningListQuery!

  """
  Start stop
  """
  start: BusStopItem!

  """
  End stop
  """
  end: BusStopItem!
}

type BusRouteTypeQuery {
  """
  Type code
  """
  code: String!

  """
  Type name
  """
  name: String!
}

type BusRouteCompanyQuery {
  """
  Company ID
  """
  id: Int!

  """
  Company name
  """
  name: String!

  """
  Company telephone
  """
  telephone: String!
}

type BusRunningListQuery {
  """
  Up
  """
  up: BusRunningTimeQuery!

  """
  Down
  """
  down: BusRunningTimeQuery!
}

type BusRunningTimeQuery {
  """
  First time
  """
  first: String!

  """
  Last time
  """
  last: String!
}

type BusStopItem {
  """
  Stop ID
  """
  id: Int!

  """
  Stop name
  """
  name: String!

  """
  District code
  """
  districtCode: Int!

  """
  Region name
  """
  region: String!

  """
  Mobile number
  """
  mobileNumber: String!

  """
  Latitude
  """
  latitude: Float!

  """
  Longitude
  """
  longitude: Float!
}

type BusTimetableQuery {
  """
  Is weekdays
  """
  weekdays: String!

  """
  Departure time
  """
  time: String!
}

type BusRealtimeQuery {
  """
  Sequence
  """
  sequence: Int!

  """
  Stop
  """
  stop: Int!

  """
  Time
  """
  time: Float!

  """
  Seat
  """
  seat: Int!

  """
  Low floor
  """
  lowFloor: Boolean!

  """
  Updated at
  """
  updatedAt: DateTime!
}

type BusDepartureLogQuery {
  """
  Departure date
  """
  departureDate: Date!

  """
  Departure time
  """
  departureTime: Time!

  """
  Vehicle ID
  """
  vehicleId: String!
}

type ShuttleQuery {
  period: [ShuttlePeriodQuery!]!

  holiday: [ShuttleHolidayQuery!]!

  stop: [ShuttleStopQuery!]!

  route: [ShuttleRouteQuery!]!

  timetable: [ShuttleTimetableQuery!]!
}

type ShuttlePeriodQuery {
  start: DateTime!

  end: DateTime!

  type: String!
}

type ShuttleHolidayQuery {
  date: Date!

  calendar: String!

  type: String!
}

type ShuttleStopQuery {
  name: String!

  latitude: Float!

  longitude: Float!

  routes: [ShuttleStopRouteQuery!]!
}

type ShuttleStopRouteQuery {
  name: String!

  tag: String!

  start: String!

  end: String!

  korean: String!

  english: String!
}

type ShuttleRouteQuery {
  name: String!

  tag: String!

  start: String!

  end: String!

  korean: String!

  english: String!

  stops: [ShuttleRouteStopQuery!]!
}

type ShuttleRouteStopQuery {
  name: String!

  sequence: Int!
}

type ShuttleTimetableQuery {
  id: Int!

  period: String!

  weekdays: Boolean!

  route: String!

  tag: String!

  stop: String!

  time: String!

  via: [ShuttleViaQuery!]!
}

type ShuttleViaQuery {
  stop: String!

  time: String!
}

type NoticeQuery {
  """
  Category of notice
  """
  category: NoticeCategoryQuery!

  """
  Notice ID
  """
  id: Int!

  """
  Notice title
  """
  title: String!

  """
  Notice URL
  """
  url: String!

  """
  Notice expired at
  """
  expiredAt: DateTime

  """
  User ID
  """
  userID: String!

  """
  Language
  """
  language: String!
}

type NoticeCategoryQuery {
  """
  Category ID
  """
  id: Int!

  """
  Category name
  """
  name: String!
}

type CalendarQuery {
  """
  Version of event
  """
  version: String!

  """
  List of events
  """
  data: [EventQuery!]!
}

type EventQuery {
  """
  Category of event
  """
  category: CalendarCategoryQuery!

  """
  Calendar ID
  """
  id: Int!

  """
  Calendar title
  """
  title: String!

  """
  Calendar description
  """
  description: String!

  """
  Calendar start date
  """
  start: Date!

  """
  Calendar end date
  """
  end: Date!
}

type CalendarCategoryQuery {
  """
  Category ID
  """
  id: Int!

  """
  Category name
  """
  name: String!
}

type ContactQuery {
  """
  Version of event
  """
  version: String!

  """
  List of events
  """
  data: [ContactItemQuery!]!
}

type ContactItemQuery {
  """
  Category of contact
  """
  category: ContactCategoryQuery!

  """
  Contact ID
  """
  id: Int!

  """
  Contact name
  """
  name: String!

  """
  Contact phone number
  """
  phone: String!

  """
  Campus ID
  """
  campusID: Int!
}

type ContactCategoryQuery {
  """
  Category ID
  """
  id: Int!

  """
  Category name
  """
  name: String!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  isOneOf: Boolean
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

schema {
  query: Query
}
